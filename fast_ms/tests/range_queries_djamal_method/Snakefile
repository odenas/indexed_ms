import sys
sys.path.append("..")
from _paths import *
import subprocess
import csv
from itertools import combinations
import os


def i(s, idir=idir):
    return os.path.join(idir, s)


def exec_diff(f1, f2):
    res = subprocess.check_call(f"diff -q {f1} {f2}", shell=True)
    if int(res) == 0:
        return "OK"
    return "FAIL"


def get_range_endpoints(fname):
    command = f"{print_int_ms} -ms_path {fname}"
    res = subprocess.check_output(command, shell=True).decode()
    ilen = res.count(" ")

    range_idx = ([(_, _ + 4) for _ in range(1, ilen - 4, 4)] +
                 [(_, _ + 1) for _ in range(1, ilen - 1, 1)])
    return range_idx


def exec_range_query(fname, from_idx, to_idx, method):
    block_size = {"djamal": -1, "baseline": 0}[method]
    command = (f"{range_query} -compression none "
               f"-ms_path {fname} "
               f"-block_size {block_size} "
               f"-from_idx {from_idx} -to_idx {to_idx} ")
    res = subprocess.check_output(command, shell=True).decode().strip()
    return int(res.split(": ")[1])


def exec_multiple_range_queries(fname, method):
    for start, end in get_range_endpoints(fname):
        res = exec_range_query(fname, start, end, method)
        yield start, end, res



wildcard_constraints:
    method="(djamal)|(baseline)"


rule all:
    input:
        d=expand("{inid}.djamal", inid=iids),
        b=expand("{inid}.baseline", inid=iids)
    run:
        for fnames in zip(input.d, input.b):
            print(*fnames, exec_diff(*fnames))


rule djamal:
    input:
        i(ipair("{inid}").ms_path)
    output:
        "{inid}.{method}"
    run:
        with open(str(output), 'w', newline='\n') as fd:
            writer = csv.writer(fd)
            writer.writerows(exec_multiple_range_queries(str(input), wildcards.method))
