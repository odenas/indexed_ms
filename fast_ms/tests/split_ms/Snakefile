import sys
sys.path.append("..")
from _paths import *

it = input_index_types[0]
il = input_index_lengths[0]
qt = input_query_types[0]
ql = input_query_lengths[0]
iid = strfiid(it,il, qt, ql, alphabet)
ms_len = ql * 2

oids = ["fixsplit_{:.0f}_{:.0f}".format(int(i), int(i + 50))
        for i in range(0, ms_len, int(ms_len / 2))]


rule all:
    input:
        ["{}.ms.checked".format(a) for a in oids]


rule check:
    input:
        expected_source=ipair(iid).ms_path + ".txt",
        actual="{all_split_id}.ms.txt"
    output:
        touch("{all_split_id}.ms.checked")
    run:
        _, start, end = wildcards.all_split_id.split("_")
        with open(input.expected_source) as fd:
            expected_str = fd.read()[int(start):int(end)].strip()
        with open(input.actual) as fd:
            actual_str = fd.read().strip()
        if expected_str != actual_str:
            match_str = [{False: "*", True: "|"}[a == b]
                         for a, b in zip(expected_str, actual_str)]
            print(expected_str)
            print("".join(match_str))
            print(actual_str)
            assert 0 == 1


rule fix_size:
    input:
        ms=ipair(iid).ms_path
    output:
        ["{}.ms".format(a) for a in oids]
    params:
        exe=split_ms,
        size=ql,
        prefix="fixsplit",
        suffix=".ms"
    shell:
        ("{params.exe} -ms_path {input.ms} "
         "-block_type fixed_size -len {params.size} "
         "-out_prefix {params.prefix} -out_suffix {params.suffix}")


rule txt_ms:
    input:
        ipair(iid).ms_path
    output:
        ipair(iid).ms_path + ".txt"
    params:
        exe=print_bin_ms
    shell:
        "{params.exe} -ms_path {input} >{output}"


rule split_txt_ms:
    input:
        "{all_split_id}.ms"
    output:
        "{all_split_id}.ms.txt"
    params:
        exe=print_bin_ms
    shell:
        "{params.exe} -ms_path {input} >{output}"

rule ms:
    input:
        s=ipair(iid).s,
        t=ipair(iid).t
    output:
        ipair(iid).ms_path, ipair(iid).ms_path + ".0",
        ipair(iid).ms_path.replace(".ms", ".runs"),
        (ipair(iid).ms_path + ".0").replace(".ms.0", ".runs.0"),
    params:
        exec_path=ms_par,
        lca_parents=1,
        rank_fail=1,
        double_rank=1,
        lazy_wl=1
    threads:
        1
    wrapper:
        "file:../../wrappers/ms"


rule input_data:
    input:
        os.path.join(idir, ipair(iid).s), os.path.join(idir, ipair(iid).t)
    output:
        ipair(iid).s, ipair(iid).t
    shell:
        "cp -v {input} ."
