import sys
sys.path.append("..")
from _paths import *
import subprocess
import csv
from itertools import combinations
import os
import numpy as np
import logging

#logging.basicConfig(level=logging.INFO)
#log = logging.getLogger()


iids = ['rnd_200_1024']
block_size = 8
avail_compr = ipair.avail_compr[:2]
avail_compr = ["none", "rle"]

def i(s, idir=idir):
    return os.path.join(idir, s)


def exec_diff(f1, f2):
    res = subprocess.check_call(f"diff -q {f1} {f2}", shell=True)
    if int(res) == 0:
        return "OK"
    return "FAIL"


def exec_count(fname):
    command = f"wc -w {fname}"
    res = subprocess.check_output(command, shell=True).decode()
    return int(res.split()[0])


def get_range_endpoints(ilen):
    range_idx = []
    l = 1
    range_idx += [(_, _ + l) for _ in range(1, ilen - l, l)]
    l = 4
    range_idx += [(_, _ + l) for _ in range(1, ilen - l, l)]
    l = 16
    range_idx += [(_, _ + l) for _ in range(1, ilen - l, l)]

    return range_idx


def exec_range_query(ip_inst, from_idx, to_idx, method, compr, index):
    ms_path = ip_inst.compr_ms_path(compr)
    #bsize = {"fast": -1, "trivial": 0, 'indexed': block_size}[method]
    bsize = (block_size if index else 0)
    command = (f"{range_query} -compression {compr} "
               f"-ms_path {ms_path} "
               f"-block_size {bsize} "
               f"-algo {method} "
               f"-op max "
               f"-from_idx {from_idx} -to_idx {to_idx} ")
    if index:
        command += ' -ridx_path %s' % ip_inst.ridx(bsize)

    #log.info("command: %s", command)
    res = subprocess.check_output(command, shell=True).decode().strip()
    return int(res.split(": ")[1])


def exec_multiple_range_queries(ipair_instance, method, compr, index):
    mstat_path = i(ipair_instance.mstat)
    ilen = exec_count(mstat_path)

    if method == 'correct':
        np_data = np.loadtxt(mstat_path)
        assert np_data.shape[0] == ilen

        for start, end in get_range_endpoints(np_data.shape[0]):
            yield start, end, int(np_data[start:end].max())
    else:
        for start, end in get_range_endpoints(ilen):
            res = exec_range_query(ipair_instance, start, end, method, compr, index)
            yield start, end, res

wildcard_constraints:
    compr="(" + ")|(".join(avail_compr) + ")",


rule all:
    input:
        expand("{inid}.{bsize}.{compr}.check", inid=iids, bsize=(0,), compr=avail_compr),
        expand("{inid}.{bsize}.none.check", inid=iids, bsize=(block_size,))
    shell:
        ("cat {input}")


rule check_rrr:
    input:
        t="{inid}.{bsize}.rrr.t",
        c="{inid}.{bsize}.rrr.correct"
    output:
        "{inid}.{bsize}.rrr.check"
    run:
        with open(str(output), 'w') as out_fd:
            for d in input:
                print(d, exec_diff(d, input.c), file=out_fd)

rule check_rle_noindex:
    wildcard_constraints:
        bsize="0"
    input:
        d="{inid}.{bsize}.rle.d",
        t="{inid}.{bsize}.rle.t",
        c="{inid}.{bsize}.rle.correct"
    output:
        "{inid}.{bsize}.rle.check"
    run:
        with open(str(output), 'w') as out_fd:
            for d in input:
                print(d, exec_diff(d, input.c), file=out_fd)

rule check_none_noindex:
    wildcard_constraints:
        bsize="0"
    input:
        f="{inid}.{bsize}.none.d",
        t="{inid}.{bsize}.none.t",
        c="{inid}.{bsize}.none.correct"
    output:
        "{inid}.{bsize}.none.check"
    run:
        with open(str(output), 'w') as out_fd:
            for d in input:
                print(d, exec_diff(d, input.c), file=out_fd)

rule check_none_indexed:
    wildcard_constraints:
        bsize="%d"%block_size
    input:
        t="{inid}.{bsize}.none.t",
        c="{inid}.{bsize}.none.correct"
    output:
        "{inid}.{bsize}.none.check"
    run:
        with open(str(output), 'w') as out_fd:
            for d in input:
                print(d, exec_diff(d, input.c), file=out_fd)


rule noindex:
    wildcard_constraints:
        method="(t)|(d)|(correct)"
    input:
        ms=ipair("{inid}").compr_ms_path("{compr}")
    output:
        "{inid}.0.{compr}.{method}"
    run:
        with open(str(output), 'w', newline='\n') as fd:
            writer = csv.writer(fd)
            writer.writerows(
                exec_multiple_range_queries(ipair(wildcards.inid), wildcards.method, wildcards.compr, False)
            )

rule indexed:
    wildcard_constraints:
        method="(t)|(correct)",
    input:
        ms=ipair("{inid}").compr_ms_path("{compr}"),
        idx=ipair("{inid}").ridx(block_size)
    output:
        "{inid}." + str(block_size) + ".{compr}.{method}"
    run:
        with open(str(output), 'w', newline='\n') as fd:
            writer = csv.writer(fd)
            writer.writerows(
                exec_multiple_range_queries(ipair(wildcards.inid), wildcards.method, wildcards.compr, True)
            )

rule compress_ms:
    input:
        i(ipair("{inid}").ms_path)
    output:
        ipair("{inid}").compr_ms_path("{compr}")
    params:
        exe=compress_ms
    shell:
        ("if [ '{wildcards.compr}' == 'none' ] ; "
         "then cp -v {input} {output}; "
         "else {params.exe} -ms_path {input} -compression {wildcards.compr} && "
         "mv `dirname {input}`/{output} .; "
         "fi")

rule ridx:
    input:
        ipair("{inid}").compr_ms_path("none")
    output:
        ipair("{inid}").ridx(block_size)
    params:
        exe=range_index,
        bsize=block_size
    shell:
        ("{params.exe} -ms_path {input} -block_size {params.bsize} -op max")
