import os
import numpy as np

configfile: "../config.yaml"

compression_modes = config['compression_modes']
block_sizes = config["block_sizes"]
range_sizes = (2**np.arange(0, 28))
from_max_idx = 300000
msids = config["species"]

config['rq_profile_exe'] = os.path.join('..', config['rq_profile_exe'])
config['dump_ridx_exe'] = os.path.join('..', config['dump_ridx_exe'])


wildcard_constraints:
    compress="(" + ")|(".join(compression_modes) + ")",
    range="\d+",
    msid="(" + ")|(".join(msids) + ")"


rule all:
    input:
        expand("{msid}.t.ms.csv", msid=msids)



rule collect:
    threads: 1
    input:
        map(lambda s: "{msid}." + s,
            expand("t.ms.0.{r}.none.{a}.csv", a=config['algo'], r=range_sizes)),
        map(lambda s: "{msid}." + s,
            expand("t.ms.0.{r}.rle.t.csv", r=range_sizes)),
        map(lambda s: "{msid}." + s,
            expand("t.ms.1024.{r}.none.t.csv", r=range_sizes)),
        map(lambda s: "{msid}." + s,
            expand("t.ms.50000.{r}.none.t.csv", r=range_sizes)),
        map(lambda s: "{msid}." + s,
            expand("t.ms.500000.{r}.none.t.csv", r=range_sizes)),
        map(lambda s: "{msid}." + s,
            expand("t.ms.1000000.{r}.none.t.csv", r=range_sizes)),
        #map(lambda s: "{msid}." + s,
        #    expand("t.ms.1000000.{r}.none.t.csv", r=np.arange(0, 1000000, 100000))),
        #map(lambda s: "{msid}." + s,
        #    expand("t.ms.0.{r}.rrr.t.csv", r=range_sizes))
    output:
        "{msid}.t.ms.csv"
    run:
        print("I", input)
        with open(str(output), "w") as fd:
            fd.write("compression,block_size,range_size,nqueries,algo,method,time_ms\n")
            for i in input:
                print(i , "-->", str(output))
                with open(str(i), "r") as infd:
                    for line in infd:
                        fd.write(line)


rule index_profile:
    wildcard_constraints:
        block_size="\d{2,9}",
    threads: 1
    input:
        i="{msid}.t.ms.{compress}",
        pm="{msid}.t.ms.none.{block_size}.ridx"
    output:
        ("{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv")
    params:
        fmi=from_max_idx,
        niter=100
    shell:
        ("{config[rq_profile_exe]} -from_max_idx {params.fmi} "
         "-ms_path {input.i} "
         "-compression {wildcards.compress} "
         "-ridx_path {input.pm} "
         "-range_size {wildcards.range} "
         "-block_size {wildcards.block_size} "
         "-algo {wildcards.algo} "
         "-op max "
         "-niter {params.niter} >{output}")

rule ridx:
    threads: 1
    input:
        "{msid}.t.ms.none"
    benchmark:
        "benchmark/{msid}.ridx_time.{block_size}.tsv"
    output:
        protected("{msid}.t.ms.none.{block_size}.ridx")
    shell:
        ("{config[dump_ridx_exe]} "
         "-ms_path {input} "
         "-block_size {wildcards.block_size} "
         "-op max")

rule noindex_profile:
    wildcard_constraints:
        block_size="[0]",
    threads: 1
    input:
        i="{msid}.t.ms.{compress}"
    output:
        ("{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv")
    params:
        fmi=from_max_idx,
        niter=100
    shell:
        ("{config[rq_profile_exe]} -from_max_idx {params.fmi} "
         "-ms_path {input.i} "
         "-compression {wildcards.compress} "
         "-range_size {wildcards.range} "
         "-block_size {wildcards.block_size} "
         "-algo {wildcards.algo} "
         "-op max "
         "-niter {params.niter} >{output}")

rule compressed_input:
    threads: 1
    input:
        "../{msid}.t.ms.{compress}"
    output:
        protected("{msid}.t.ms.{compress}")
    shell:
        ("cp -v {input} {output} ")
