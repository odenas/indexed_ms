import os
from pathlib import Path
import numpy as np

configfile: "../config.yaml"

compression_modes = config['compression_modes']
block_sizes = config['block_sizes']
range_sizes = list(map(str, map(int, np.array([1]) * 100000)))
from_max_idx = 800000
msids = config["species"]

config['rq_profile_exe'] = os.path.join('..', config['rq_profile_exe'])
config['dump_ridx_exe'] = os.path.join('..', config['dump_ridx_exe'])


wildcard_constraints:
    compress="(" + ")|(".join(compression_modes) + ")",
    range="\d0{4,9}",
    msid="(" + ")|(".join(msids) + ")"

rule all:
    input:
        expand("{msid}.t.ms.csv", msid=msids)



rule collect:
    threads: 1
    input:
        map(lambda s: "{msid}." + s,
            expand("t.ms.{b}.{r}.{c}.{a}.csv",
                   b=block_sizes,
                   r=range_sizes,
                   c=compression_modes,
                   a=config['algo']))
    output:
        "{msid}.t.ms.csv"
    run:
        print("I", input)
        with open(str(output), "w") as fd:
            fd.write("compression,block_size,range_size,nqueries,algo,method,time_ms\n")
            for i in input:
                print(i , "-->", str(output))
                with open(str(i), "r") as infd:
                    for line in infd:
                        fd.write(line)


rule index_profile:
    wildcard_constraints:
        block_size="[1-9]\d*",
    threads: 1
    input:
        ms="{msid}.t.ms.{compress}",
        ridx="{msid}.t.ms.none.{block_size}.ridx"
    output:
        "{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv"
    params:
        bin_dir=Path(config["rq_profile_exe"]).parent,
        compression=lambda wildcards, input: wildcards.compress,
        block_size=lambda wildcards, input: wildcards.block_size,
        range_size=lambda wildcards, input: wildcards.range,
        algo=lambda wildcards, input: wildcards.algo,
        op="sum",
        from_max_idx=from_max_idx,
        niter=1000
    wrapper:
        "file:../../../../fast_ms/wrappers/range_queries"

#rule index_profile:
#    wildcard_constraints:
#        block_size="\d{2,9}"
#    threads: 1
#    input:
#        i="../{msid}.t.ms.{compress}",
#        ps="{msid}.t.ms.none.{block_size}.ridx"
#    output:
#        ("{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv")
#    params:
#        fmi=from_max_idx,
#        niter=1000
#    shell:
#        ("{config[rq_profile_exe]} -from_max_idx {params.fmi} "
#         "-ms_path {input.i} "
#         "-compression {wildcards.compress} "
#         "-ridx_path {input.ps} "
#         "-range_size {wildcards.range} "
#         "-block_size {wildcards.block_size} "
#         "-algo {wildcards.algo} "
#         "-niter {params.niter} >{output}")

rule noindex_profile:
    wildcard_constraints:
        block_size="[0]",
    threads: 1
    input:
        ms="{msid}.t.ms.{compress}",
    output:
        "{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv"
    params:
        bin_dir=Path(config["rq_profile_exe"]).parent,
        compression=lambda wildcards, input: wildcards.compress,
        block_size=lambda wildcards, input: wildcards.block_size,
        range_size=lambda wildcards, input: wildcards.range,
        algo=lambda wildcards, input: wildcards.algo,
        op="max",
        from_max_idx=from_max_idx,
        niter=20
    wrapper:
        "file:../../../../fast_ms/wrappers/range_queries"


#rule noindex_profile:
#    wildcard_constraints:
#        block_size="[0]",
#    threads: 1
#    input:
#        i="../{msid}.t.ms.{compress}"
#    output:
#        ("{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv")
#    params:
#        fmi=from_max_idx,
#        niter=100
#    shell:
#        ("{config[rq_profile_exe]} -from_max_idx {params.fmi} "
#         "-ms_path {input.i} "
#         "-compression {wildcards.compress} "
#         "-range_size {wildcards.range} "
#         "-block_size {wildcards.block_size} "
#         "-algo {wildcards.algo} "
#         "-niter {params.niter} >{output}")


rule ridx:
    threads: 1
    input:
        "{msid}.t.ms.none"
    benchmark:
        "benchmark/{msid}.ridx_time.{block_size}.tsv"
    output:
        protected("{msid}.t.ms.none.{block_size}.ridx")
    shell:
        ("{config[dump_ridx_exe]} "
         "-ms_path {input} "
         "-block_size {wildcards.block_size} "
         "-op sum ")

rule compressed_input:
    threads: 1
    input:
        "../{msid}.t.ms.{compress}"
    output:
        protected("{msid}.t.ms.{compress}")
    shell:
        ("cp -v {input} {output} ")
