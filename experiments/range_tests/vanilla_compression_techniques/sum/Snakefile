import os
from pathlib import Path
import numpy as np

configfile: "../config.yaml"

compression_modes = config['compression_modes']
block_sizes = config["block_sizes"]
range_sizes = config['range_sizes']
from_max_idx = config['from_max_idx']
msids = config["species"]

config['rq_profile_exe'] = os.path.join('..', config['rq_profile_exe'])
config['dump_ridx_exe'] = os.path.join('..', config['dump_ridx_exe'])


wildcard_constraints:
    compress="(" + ")|(".join(compression_modes) + ")",
    range="\d+",
    algo="(" + ")|(".join(config['algo']) + ")",
    msid="(" + ")|(".join(msids) + ")"


def line_iter(fname, header):
    with open(str(fname)) as fd:
        for i, line in enumerate(fd):
            if i == 0 and not header:
                continue
            yield line

rule all:
    input:
        expand("{msid}.t.ms.csv", msid=msids), expand("{msid}.t.ms.none.rmq.csv", msid=msids)


rule collect_rmq_sizes:
    threads: 1
    input:
        map(lambda s: "{msid}." + s, expand("t.ms.none.{b}.rmq.csv", b=block_sizes))
    output:
        "{msid}.t.ms.none.rmq.csv"
    run:
        with open(str(output), 'wt') as ofd:
            for i, fname in enumerate(input):
                for line in line_iter(fname, i == 0):
                    ofd.write(line)

rule collect_profiles:
    threads: 1
    input:
        map(lambda s: "{msid}." + s, expand("t.ms.{b}.{r}.{c}.{a}.csv",  # no index
            b=block_sizes, r=range_sizes, c=compression_modes, a=config['algo'])),
        map(lambda s: "{msid}." + s, expand("t.ms.0.{r}.{c}.{a}.csv",
            r=range_sizes, c=compression_modes, a=config['algo']))
    output:
        "{msid}.t.ms.csv"
    run:
        print("I", input)
        with open(str(output), "w") as fd:
            fd.write("compression,block_size,range_size,nqueries,algo,method,time_ms\n")
            for i in input:
                print(i , "-->", str(output))
                with open(str(i), "r") as infd:
                    for line in infd:
                        fd.write(line)


rule index_profile:
    wildcard_constraints:
        block_size="[1-9]\d*",
    threads: 1
    input:
        ms="{msid}.t.ms.{compress}",
        ridx="{msid}.t.ms.none.{block_size}.ridx"
    output:
        "{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv"
    params:
        exec_path=Path(config["rq_profile_exe"]),
        compression=lambda wildcards, input: wildcards.compress,
        block_size=lambda wildcards, input: wildcards.block_size,
        range_size=lambda wildcards, input: wildcards.range,
        algo=lambda wildcards, input: wildcards.algo,
        op="sum",
        from_max_idx=from_max_idx,
        niter=20
    wrapper:
        "file:../../../../fast_ms/wrappers/range_queries_profile"


rule noindex_profile:
    wildcard_constraints:
        block_size="[0]",
    threads: 1
    input:
        ms="{msid}.t.ms.{compress}",
    output:
        "{msid}.t.ms.{block_size}.{range}.{compress}.{algo}.csv"
    params:
        exec_path=Path(config["rq_profile_exe"]),
        compression=lambda wildcards, input: wildcards.compress,
        block_size=lambda wildcards, input: wildcards.block_size,
        range_size=lambda wildcards, input: wildcards.range,
        algo=lambda wildcards, input: wildcards.algo,
        op="sum",
        from_max_idx=from_max_idx,
        niter=5, #lambda wildcards, input: max(5, 30 - max(0, int(np.log2(wildcards.range) + 5)))
    wrapper:
        "file:../../../../fast_ms/wrappers/range_queries_profile"


rule rmq_size :
    input:
        exe="../rmq_size.x",
        ridx="{msid}.t.ms.none.{block_size}.ridx"
    output:
        "{msid}.t.ms.none.{block_size}.rmq.csv"
    shell:
        "./{input.exe} -ridx_path {input.ridx} -block_size {wildcards.block_size} >{output}"

rule ridx:
    threads: 1
    input:
        "{msid}.t.ms.none"
    benchmark:
        "benchmark/{msid}.ridx_time.{block_size}.tsv"
    output:
        protected("{msid}.t.ms.none.{block_size}.ridx")
    shell:
        ("{config[dump_ridx_exe]} "
         "-ms_path {input} "
         "-block_size {wildcards.block_size} "
         "-op sum ")

rule compressed_input:
    threads: 1
    input:
        "../{msid}.t.ms.{compress}"
    output:
        protected("{msid}.t.ms.{compress}")
    shell:
        ("cp -v {input} {output} ")
