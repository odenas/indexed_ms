from pathlib import Path
import numpy as np
import pandas as pd

configfile: "config.yaml"

compression_modes = config['compression_modes']
msids = config["species"]


wildcard_constraints:
    compress="(" + ")|(".join(compression_modes) + ")",
    msid="(" + ")|(".join(msids) + ")"

rule all:
    input:
        "ms_sizes.csv", "profiles.csv", "ridx_sizes.csv", "rmq_sizes.csv"


rule rmq_sizes:
    input:
        rmq="max/rmq_sizes.csv"
    output:
        "rmq_sizes.csv"
    shell:
        "cp -v {input.rmq} {output}"


rule gather_profiles:
    input:
        expand("{o}/profile.csv", o=["sum", "max"])
    output:
        "profiles.csv"
    run:
        (pd.concat([pd.read_csv(i).assign(op=str(Path(i).parent))
                    for i in input])
         .to_csv(str(output), index=False))

rule gather_ridx_sizes:
    input:
        expand("{o}/ridx_sizes.csv", o=["sum", "max"])
    output:
        "ridx_sizes.csv"
    run:
        (pd.concat([pd.read_csv(i).assign(fn=str(Path(i).parent))
                    for i in input])
         .to_csv(str(output), index=False))


rule sizes:
    input:
        expand("{msid}.ms.{c}", msid=msids, c=compression_modes)
    output:
        "ms_sizes.csv"
    run:
        (pd.DataFrame([(Path(p).name, Path(p).stat().st_size)
                       for p in input], columns=["name", "size"])
         .to_csv(str(output), index=False))



rule compress_ms:
    input:
        "{msid}.ms"
    output:
        ms=protected("{msid}.ms.{compress}"),
        hist= "{msid}.ms.{compress}.hist"
    wildcard_constraints:
        compress="(" + ")|(".join(compression_modes) + ")"
    threads: 1
    shell:
        ("if [ '{wildcards.compress}' == 'none' ] ; "
         "then cp -v {input} {output.ms} && touch {output.hist}; "
         "else {config[compress_exe]} -ms_path {input} -compression {wildcards.compress} > {output.hist}; "
         "fi")
