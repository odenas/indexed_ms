import numpy as np

compression_modes = ["none", "rrr", "rle", "succint", "nibble", "delta"]
block_sizes = list(map(str, [0, 32, 1024]))
range_sizes = list(map(str, map(int, np.array([2, 4, 6, 10, 20]) * 100000)))
from_max_idx = 800000
msids = ["mm", "HG03061-2"]


wildcard_constraints:
    block_size="\d{2,4}",
    compress="(" + ")|(".join(compression_modes) + ")",
    range="\d0{4,9}",
    msid="(" + ")|(".join(msids) + ")"

rule all:
    input:
        expand("{msid}.t.ms.csv", msid=msids)


rule collect:
    threads: 1
    input:
        map(lambda s: "{msid}." + s, expand("t.ms.{b}.{r}.{c}.csv",
                                            r=range_sizes,
                                            c=compression_modes,
                                            b=block_sizes))
    output:
        "{msid}.t.ms.csv"
    run:
        with open(str(output), "w") as fd:
            fd.write("compression,block_size,range_size,nqueries,method,time_ms\n")
            for i in input:
                print(i, " --> ", output)
                with open(str(i), "r") as infd:
                    for line in infd:
                        fd.write(line)


rule ridx_profile:
    threads: 1
    input:
        x="../../fast_ms/bin/range_queries_profile.x",
        i="{msid}.t.ms.{compress}",
        ps="{msid}.t.ms.{block_size}.ridx"
    output:
        temp("{msid}.t.ms.{block_size}.{range}.{compress}.csv")
    params:
        fmi=from_max_idx
    shell:
        ("{input.x} -from_max_idx {params.fmi} "
         "-ms_path {input.i} "
         "-compression {wildcards.compress} "
         "-ridx_path {input.ps} "
         "-range_size {wildcards.range} "
         "-block_size {wildcards.block_size} "
         "-niter 1000000 >{output}")

rule trivial_profile:
    threads: 1
    input:
        x="../../fast_ms/bin/range_queries_profile.x",
        i="{msid}.t.ms.{compress}"
    output:
        temp("{msid}.t.ms.0.{range}.{compress}.csv")
    params:
        fmi=from_max_idx
    shell:
        ("{input.x} -from_max_idx {params.fmi} "
         "-ms_path {input.i} "
         "-compression {wildcards.compress} "
         "-ridx_path {input.x} "
         "-range_size {wildcards.range} "
         "-block_size 0 "
         "-niter 10 >{output}")

rule partial_sums:
    threads: 1
    input:
        i="{msid}.t.ms",
        x="../../fast_ms/bin/dump_range_index.x"
#    benchmark:
#        "{msid}.ridx_time.{block_size}.tsv"
    output:
        "{msid}.t.ms.{block_size}.ridx",
        "{msid}.t.ms.{block_size}.ridx.csv"
    shell:
        "{input.x} -ms_path {input.i} -block_size {wildcards.block_size} -time_usage 1 >>{output[1]}"

rule compressed:
    wildcard_constraints:
        compress="(" + ")|(".join(compression_modes[1:]) + ")",
    threads: 1
    input:
        i="{msid}.t.ms",
        x="../../fast_ms/bin/compress_ms.x"
#    benchmark:
#        "{msid}.compress_time.{compress}.tsv"
    output:
        "{msid}.t.ms.{compress}"
    shell:
        "{input.x} -ms_path {input.i} -compression {wildcards.compress} > {output}.hist"

rule un_compresed:
    threads: 1
    input:
        "{msid}.t.ms"
    output:
        "{msid}.t.ms.none"
    shell:
        "cp {input} {output}"
